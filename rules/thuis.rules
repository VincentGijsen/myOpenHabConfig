import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.lang.Math.*

//1.27 = 100%, but leds are ~even bright at ~80%
var float rscalar = (1.27 * 1.0).floatValue()
var float gscalar = (1.27 * 1.0).floatValue()
var float bscalar = (1.27 * 1.0).floatValue()


val Number systemcode = 31
val Number on = 1
val Number off = 0


rule "dimmer_bed Bedlight RGB"
	when
		Item dimmer_bed received command
	then
	    var Number percent = 0
	
		if(dimmer_bed.state instanceof DecimalType) percent = dimmer_bed.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5
		if(receivedCommand==OFF) percent = 0
		
		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		
		
		//we scale decimally, not hexadicimal!
		val Number scale = Math::floor( percent.floatValue * 1.27).intValue
		val cmd = String::format("l%c%xx\n", 0x02, scale )
		sendCommand(Msp, cmd)
		postUpdate(dimmer_bed, percent);
end

rule "Ledstrip met Adres1, 1byte kleuren"
	when
		Item Kast_led received command
	then
	    var Number percent = 0
	
		if(Kast_led.state instanceof DecimalType) percent = Kast_led.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5
		if(receivedCommand==OFF) percent = 0
		
		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		
		
		//we scale decimally, not hexadicimal!
		val Number scale = Math::floor( percent.floatValue * 1.27).intValue
		val cmd = String::format("l%c%cxx\n", 0x01, scale )
		logInfo("KastLight" , "got: " + cmd)
		sendCommand(Msp, cmd)
		postUpdate(dimmer_bed, percent);
end




rule "Hallogeen Tv"
	when Item  Light_hoek received command
	then
	if(receivedCommand==ON)sendCommand(Msp,String::format("e%cA%c\n", systemcode.intValue, on.intValue))
	if(receivedCommand==OFF)sendCommand(Msp,String::format("e%cA%c\n", systemcode.intValue ,off.intValue))
end

rule "Bureau Lamp"
	when Item  Light_bureau received command
	then	
	if(receivedCommand==ON)sendCommand(Msp,String::format("e%cB%c\n", systemcode.intValue, on.intValue))
	if(receivedCommand==OFF)sendCommand(Msp,String::format("e%cB%c\n", systemcode.intValue ,off.intValue))
end

rule "Kast Lamp"
	when Item  Light_kast received command
	then	
	if(receivedCommand==ON)sendCommand(Msp,String::format("e%cC%c\n", systemcode.intValue, on.intValue))
	if(receivedCommand==OFF)sendCommand(Msp,String::format("e%cC%c\n", systemcode.intValue ,off.intValue))
end


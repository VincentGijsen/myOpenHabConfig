import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.lang.Math.*

//1.27 = 100%, but leds are ~even bright at ~80%
var float rscalar = (1.27 * 0.8).floatValue()
var float gscalar = (1.27 * 0.01).floatValue()
var float bscalar = (1.27 * 1.0).floatValue()



rule "L1"
	when
		Item L1 received command
	then
	    var Number percent = 0
	
		if(L1.state instanceof DecimalType) percent = L1.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5
		if(receivedCommand==OFF) percent = 0
		
		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		
		
		//we scale decimally, not hexadicimal!
		val Number scale = Math::floor( percent.floatValue * 1.27).intValue
		val cmd = String::format("L1r%c\n", scale )
		logInfo("bedlight" , "bedLight send " + cmd)
		sendCommand(Msp, cmd)
		postUpdate(L1, percent);
end

rule "RGB Links"
	when Item  R1 received command
	then
	var HSBType hsbType
	if (R1.state instanceof HSBType) hsbType = R1.state as HSBType
	
	var r = String::format("%c", Math::floor( hsbType.red.floatValue * rscalar).intValue())
	var g = String::format("%c", Math::floor( hsbType.green.floatValue * gscalar).intValue())
	var b = String::format("%c", Math::floor( hsbType.blue.floatValue * bscalar).intValue())
	
	println(String::format("Color settings: %d %d %d", hsbType.red.intValue(), hsbType.green.intValue(), 
			hsbType.blue.intValue()
	))
	var cmd = String::format("R1r%c%c%c\n",  r,g,b)
	logInfo("RGB links", "cmd: " + cmd)
	
	sendCommand(Msp, cmd)
end

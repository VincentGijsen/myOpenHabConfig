	
var String MspUpdate = ""

var Boolean inPackage = false


rule "MSP on update"
	when 
		Item Msp received update
	then
		//Every package starts with [ (this did i determine myserlf :)
		
		if(Msp.state.toString.trim.notBlank){
	    		MspUpdate = MspUpdate + Msp.state.toString.trim
	    		inPackage= true;
	    }
	    //or if we received only the start of the package, append it to the already known bit
	    else if(inPackage){
		    MspUpdate = MspUpdate + Msp.state.toString.trim
		 }
		 //Okay, we've just recieved garbage/debug (should not occur though
	    else
	    {    	
	    	println("invalid data: " + Msp.state.toString);
	    }
		
		
		//logic to handle the actual meaning of the package
		//we delimmit the packages with 3x ;;; to enable us to use non-determined package lenghts (<29byte ofcourse ;))
		if (MspUpdate.contains("\n")) {
				if (MspUpdate.contains("temp")) {
					var int valueStartsOn = MspUpdate.indexOf("=") + "=".length
					var String myTemperatureAsString = MspUpdate.mid(valueStartsOn, MspUpdate.indexOf(';')-valueStartsOn)
					println(myTemperatureAsString);
					var Number myTemperature = 0.0f
					myTemperature = Float::parseFloat(myTemperatureAsString)
					//postUpdate(Temperature_GF_Living, myTemperature)	
				}
				if (MspUpdate.contains("]p")){
					println("Received ping from: " + MspUpdate.substring(1,3));
				}
				inPackage=false
				MspUpdate = ""
		  }
end
